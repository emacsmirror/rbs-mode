class Abc_123
end

class My::Abc_123
end

# Foo
class Foo[unchecked in U, out T] # bar
  include Mod1
  extend Mod2
  prepend Mod3

  attr_reader foo: Integer
  attr_writer bar: bool?
  attr_accessor baz: 1 | 2 | any

  def self.create: (name: Hash, *untyped args) -> instance
  def self?.exist: () -> bool
  def name: () -> String
  def key?: () -> bool
          | super
  def write!: () -> void
  def +: () -> Integer
  def -: () -> bool
  def %: () -> bool
  alias id name
  alias flush! write!
  alias self.id self.name

  public

  private
end

class Sub1_2[U, T] < Parent[U, T]
end

module Foo::Bar : _Baz::abc
end

type Foo::bar = "string" | 100 | true | false | nil

Foo::Bar: String
::YES: String

$LOAD_PATH: Array[String]
